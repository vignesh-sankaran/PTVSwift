//
// V3SearchParameters.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation



public struct V3SearchParameters: Codable {

    public enum RouteTypes: String, Codable {
        case _0 = 0
        case _1 = 1
        case _2 = 2
        case _3 = 3
        case _4 = 4
    }
    /** Filter by route_type; values returned via RouteTypes API (note: stops and routes are ordered by route_types specified) */
    public var routeTypes: [RouteTypes]?
    /** Filter by geographic coordinate of latitude */
    public var latitude: Float?
    /** Filter by geographic coordinate of longitude */
    public var longitude: Float?
    /** Filter by maximum distance (in metres) from location specified via latitude and longitude parameters */
    public var maxDistance: Float?
    /** Placeholder for future development; currently unavailable */
    public var includeAddresses: Bool?
    /** Indicates if outlets will be returned in response (default &#x3D; true) */
    public var includeOutlets: Bool?
    /** Indicates whether to find stops by suburbs in the search term (default &#x3D; true) */
    public var matchStopBySuburb: Bool?
    /** Indicates whether to find routes by suburbs in the search term (default &#x3D; true) */
    public var matchRouteBySuburb: Bool?
    /** Indicates whether to search for stops according to a metlink stop ID (default &#x3D; false) */
    public var matchStopByGtfsStopId: Bool?

    public init(routeTypes: [RouteTypes]?, latitude: Float?, longitude: Float?, maxDistance: Float?, includeAddresses: Bool?, includeOutlets: Bool?, matchStopBySuburb: Bool?, matchRouteBySuburb: Bool?, matchStopByGtfsStopId: Bool?) {
        self.routeTypes = routeTypes
        self.latitude = latitude
        self.longitude = longitude
        self.maxDistance = maxDistance
        self.includeAddresses = includeAddresses
        self.includeOutlets = includeOutlets
        self.matchStopBySuburb = matchStopBySuburb
        self.matchRouteBySuburb = matchRouteBySuburb
        self.matchStopByGtfsStopId = matchStopByGtfsStopId
    }

    public enum CodingKeys: String, CodingKey { 
        case routeTypes = "route_types"
        case latitude
        case longitude
        case maxDistance = "max_distance"
        case includeAddresses = "include_addresses"
        case includeOutlets = "include_outlets"
        case matchStopBySuburb = "match_stop_by_suburb"
        case matchRouteBySuburb = "match_route_by_suburb"
        case matchStopByGtfsStopId = "match_stop_by_gtfs_stop_id"
    }


}

