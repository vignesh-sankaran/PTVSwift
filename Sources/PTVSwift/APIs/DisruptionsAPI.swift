//
// DisruptionsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Alamofire



open class DisruptionsAPI {
    /**
     * enum for parameter routeTypes
     */
    public enum RouteTypes_disruptionsGetAllDisruptions: Int {
        case _0 = 0
        case _1 = 1
        case _2 = 2
        case _3 = 3
        case _4 = 4
    }

    /**
     * enum for parameter disruptionModes
     */
    public enum DisruptionModes_disruptionsGetAllDisruptions: Int {
        case _1 = 1
        case _2 = 2
        case _3 = 3
        case _4 = 4
        case _5 = 5
        case _7 = 7
        case _8 = 8
        case _9 = 9
        case _10 = 10
        case _11 = 11
        case _12 = 12
        case _13 = 13
        case _14 = 14
        case _100 = 100
    }

    /**
     * enum for parameter disruptionStatus
     */
    public enum DisruptionStatus_disruptionsGetAllDisruptions: String {
        case current = "current"
        case planned = "planned"
    }

    /**
     View all disruptions for all route types
     
     - parameter routeTypes: (query) Filter by route_type; values returned via RouteTypes API (optional)
     - parameter disruptionModes: (query) Filter by disruption_mode; values returned via v3/disruptions/modes API (optional)
     - parameter disruptionStatus: (query) Filter by status of disruption (optional)
     - parameter token: (query) Please ignore (optional)
     - parameter devid: (query) Your developer id (optional)
     - parameter signature: (query) Authentication signature for request (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func disruptionsGetAllDisruptions(routeTypes: [Int]? = nil, disruptionModes: [Int]? = nil, disruptionStatus: DisruptionStatus_disruptionsGetAllDisruptions? = nil, token: String? = nil, devid: String? = nil, signature: String? = nil, completion: @escaping ((_ data: V3DisruptionsResponse?,_ error: Error?) -> Void)) {
        disruptionsGetAllDisruptionsWithRequestBuilder(routeTypes: routeTypes, disruptionModes: disruptionModes, disruptionStatus: disruptionStatus, token: token, devid: devid, signature: signature).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     View all disruptions for all route types
     - GET /v3/disruptions
     - parameter routeTypes: (query) Filter by route_type; values returned via RouteTypes API (optional)
     - parameter disruptionModes: (query) Filter by disruption_mode; values returned via v3/disruptions/modes API (optional)
     - parameter disruptionStatus: (query) Filter by status of disruption (optional)
     - parameter token: (query) Please ignore (optional)
     - parameter devid: (query) Your developer id (optional)
     - parameter signature: (query) Authentication signature for request (optional)
     - returns: RequestBuilder<V3DisruptionsResponse> 
     */
    open class func disruptionsGetAllDisruptionsWithRequestBuilder(routeTypes: [Int]? = nil, disruptionModes: [Int]? = nil, disruptionStatus: DisruptionStatus_disruptionsGetAllDisruptions? = nil, token: String? = nil, devid: String? = nil, signature: String? = nil) -> RequestBuilder<V3DisruptionsResponse> {
        let path = "/v3/disruptions"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "route_types": routeTypes, 
            "disruption_modes": disruptionModes, 
            "disruption_status": disruptionStatus?.rawValue, 
            "token": token, 
            "devid": devid, 
            "signature": signature
        ])

        let requestBuilder: RequestBuilder<V3DisruptionsResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     View a specific disruption
     
     - parameter disruptionId: (path) Identifier of disruption; values returned by Disruptions API - /v3/disruptions OR /v3/disruptions/route/{route_id} 
     - parameter token: (query) Please ignore (optional)
     - parameter devid: (query) Your developer id (optional)
     - parameter signature: (query) Authentication signature for request (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func disruptionsGetDisruptionById(disruptionId: Int64, token: String? = nil, devid: String? = nil, signature: String? = nil, completion: @escaping ((_ data: V3DisruptionResponse?,_ error: Error?) -> Void)) {
        disruptionsGetDisruptionByIdWithRequestBuilder(disruptionId: disruptionId, token: token, devid: devid, signature: signature).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     View a specific disruption
     - GET /v3/disruptions/{disruption_id}
     - parameter disruptionId: (path) Identifier of disruption; values returned by Disruptions API - /v3/disruptions OR /v3/disruptions/route/{route_id} 
     - parameter token: (query) Please ignore (optional)
     - parameter devid: (query) Your developer id (optional)
     - parameter signature: (query) Authentication signature for request (optional)
     - returns: RequestBuilder<V3DisruptionResponse> 
     */
    open class func disruptionsGetDisruptionByIdWithRequestBuilder(disruptionId: Int64, token: String? = nil, devid: String? = nil, signature: String? = nil) -> RequestBuilder<V3DisruptionResponse> {
        var path = "/v3/disruptions/{disruption_id}"
        let disruptionIdPreEscape = "\(APIHelper.mapValueToPathItem(disruptionId))"
        let disruptionIdPostEscape = disruptionIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{disruption_id}", with: disruptionIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "token": token, 
            "devid": devid, 
            "signature": signature
        ])

        let requestBuilder: RequestBuilder<V3DisruptionResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     Get all disruption modes
     
     - parameter token: (query) Please ignore (optional)
     - parameter devid: (query) Your developer id (optional)
     - parameter signature: (query) Authentication signature for request (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func disruptionsGetDisruptionModes(token: String? = nil, devid: String? = nil, signature: String? = nil, completion: @escaping ((_ data: V3DisruptionModesResponse?,_ error: Error?) -> Void)) {
        disruptionsGetDisruptionModesWithRequestBuilder(token: token, devid: devid, signature: signature).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     Get all disruption modes
     - GET /v3/disruptions/modes
     - parameter token: (query) Please ignore (optional)
     - parameter devid: (query) Your developer id (optional)
     - parameter signature: (query) Authentication signature for request (optional)
     - returns: RequestBuilder<V3DisruptionModesResponse> 
     */
    open class func disruptionsGetDisruptionModesWithRequestBuilder(token: String? = nil, devid: String? = nil, signature: String? = nil) -> RequestBuilder<V3DisruptionModesResponse> {
        let path = "/v3/disruptions/modes"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "token": token, 
            "devid": devid, 
            "signature": signature
        ])

        let requestBuilder: RequestBuilder<V3DisruptionModesResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter disruptionStatus
     */
    public enum DisruptionStatus_disruptionsGetDisruptionsByRoute: String {
        case current = "current"
        case planned = "planned"
    }

    /**
     View all disruptions for a particular route
     
     - parameter routeId: (path) Identifier of route; values returned by Routes API - v3/routes 
     - parameter disruptionStatus: (query) Filter by status of disruption (optional)
     - parameter token: (query) Please ignore (optional)
     - parameter devid: (query) Your developer id (optional)
     - parameter signature: (query) Authentication signature for request (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func disruptionsGetDisruptionsByRoute(routeId: Int, disruptionStatus: DisruptionStatus_disruptionsGetDisruptionsByRoute? = nil, token: String? = nil, devid: String? = nil, signature: String? = nil, completion: @escaping ((_ data: V3DisruptionsResponse?,_ error: Error?) -> Void)) {
        disruptionsGetDisruptionsByRouteWithRequestBuilder(routeId: routeId, disruptionStatus: disruptionStatus, token: token, devid: devid, signature: signature).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     View all disruptions for a particular route
     - GET /v3/disruptions/route/{route_id}
     - parameter routeId: (path) Identifier of route; values returned by Routes API - v3/routes 
     - parameter disruptionStatus: (query) Filter by status of disruption (optional)
     - parameter token: (query) Please ignore (optional)
     - parameter devid: (query) Your developer id (optional)
     - parameter signature: (query) Authentication signature for request (optional)
     - returns: RequestBuilder<V3DisruptionsResponse> 
     */
    open class func disruptionsGetDisruptionsByRouteWithRequestBuilder(routeId: Int, disruptionStatus: DisruptionStatus_disruptionsGetDisruptionsByRoute? = nil, token: String? = nil, devid: String? = nil, signature: String? = nil) -> RequestBuilder<V3DisruptionsResponse> {
        var path = "/v3/disruptions/route/{route_id}"
        let routeIdPreEscape = "\(APIHelper.mapValueToPathItem(routeId))"
        let routeIdPostEscape = routeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{route_id}", with: routeIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "disruption_status": disruptionStatus?.rawValue, 
            "token": token, 
            "devid": devid, 
            "signature": signature
        ])

        let requestBuilder: RequestBuilder<V3DisruptionsResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter disruptionStatus
     */
    public enum DisruptionStatus_disruptionsGetDisruptionsByRouteAndStop: String {
        case current = "current"
        case planned = "planned"
    }

    /**
     View all disruptions for a particular route and stop
     
     - parameter routeId: (path) Identifier of route; values returned by Routes API - v3/routes 
     - parameter stopId: (path) Identifier of stop; values returned by Stops API - v3/stops 
     - parameter disruptionStatus: (query) Filter by status of disruption (optional)
     - parameter token: (query) Please ignore (optional)
     - parameter devid: (query) Your developer id (optional)
     - parameter signature: (query) Authentication signature for request (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func disruptionsGetDisruptionsByRouteAndStop(routeId: Int, stopId: Int, disruptionStatus: DisruptionStatus_disruptionsGetDisruptionsByRouteAndStop? = nil, token: String? = nil, devid: String? = nil, signature: String? = nil, completion: @escaping ((_ data: V3DisruptionsResponse?,_ error: Error?) -> Void)) {
        disruptionsGetDisruptionsByRouteAndStopWithRequestBuilder(routeId: routeId, stopId: stopId, disruptionStatus: disruptionStatus, token: token, devid: devid, signature: signature).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     View all disruptions for a particular route and stop
     - GET /v3/disruptions/route/{route_id}/stop/{stop_id}
     - parameter routeId: (path) Identifier of route; values returned by Routes API - v3/routes 
     - parameter stopId: (path) Identifier of stop; values returned by Stops API - v3/stops 
     - parameter disruptionStatus: (query) Filter by status of disruption (optional)
     - parameter token: (query) Please ignore (optional)
     - parameter devid: (query) Your developer id (optional)
     - parameter signature: (query) Authentication signature for request (optional)
     - returns: RequestBuilder<V3DisruptionsResponse> 
     */
    open class func disruptionsGetDisruptionsByRouteAndStopWithRequestBuilder(routeId: Int, stopId: Int, disruptionStatus: DisruptionStatus_disruptionsGetDisruptionsByRouteAndStop? = nil, token: String? = nil, devid: String? = nil, signature: String? = nil) -> RequestBuilder<V3DisruptionsResponse> {
        var path = "/v3/disruptions/route/{route_id}/stop/{stop_id}"
        let routeIdPreEscape = "\(APIHelper.mapValueToPathItem(routeId))"
        let routeIdPostEscape = routeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{route_id}", with: routeIdPostEscape, options: .literal, range: nil)
        let stopIdPreEscape = "\(APIHelper.mapValueToPathItem(stopId))"
        let stopIdPostEscape = stopIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{stop_id}", with: stopIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "disruption_status": disruptionStatus?.rawValue, 
            "token": token, 
            "devid": devid, 
            "signature": signature
        ])

        let requestBuilder: RequestBuilder<V3DisruptionsResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter disruptionStatus
     */
    public enum DisruptionStatus_disruptionsGetDisruptionsByStop: String {
        case current = "current"
        case planned = "planned"
    }

    /**
     View all disruptions for a particular stop
     
     - parameter stopId: (path) Identifier of stop; values returned by Stops API - v3/stops 
     - parameter disruptionStatus: (query) Filter by status of disruption (optional)
     - parameter token: (query) Please ignore (optional)
     - parameter devid: (query) Your developer id (optional)
     - parameter signature: (query) Authentication signature for request (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func disruptionsGetDisruptionsByStop(stopId: Int, disruptionStatus: DisruptionStatus_disruptionsGetDisruptionsByStop? = nil, token: String? = nil, devid: String? = nil, signature: String? = nil, completion: @escaping ((_ data: V3DisruptionsResponse?,_ error: Error?) -> Void)) {
        disruptionsGetDisruptionsByStopWithRequestBuilder(stopId: stopId, disruptionStatus: disruptionStatus, token: token, devid: devid, signature: signature).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     View all disruptions for a particular stop
     - GET /v3/disruptions/stop/{stop_id}
     - parameter stopId: (path) Identifier of stop; values returned by Stops API - v3/stops 
     - parameter disruptionStatus: (query) Filter by status of disruption (optional)
     - parameter token: (query) Please ignore (optional)
     - parameter devid: (query) Your developer id (optional)
     - parameter signature: (query) Authentication signature for request (optional)
     - returns: RequestBuilder<V3DisruptionsResponse> 
     */
    open class func disruptionsGetDisruptionsByStopWithRequestBuilder(stopId: Int, disruptionStatus: DisruptionStatus_disruptionsGetDisruptionsByStop? = nil, token: String? = nil, devid: String? = nil, signature: String? = nil) -> RequestBuilder<V3DisruptionsResponse> {
        var path = "/v3/disruptions/stop/{stop_id}"
        let stopIdPreEscape = "\(APIHelper.mapValueToPathItem(stopId))"
        let stopIdPostEscape = stopIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{stop_id}", with: stopIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "disruption_status": disruptionStatus?.rawValue, 
            "token": token, 
            "devid": devid, 
            "signature": signature
        ])

        let requestBuilder: RequestBuilder<V3DisruptionsResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
