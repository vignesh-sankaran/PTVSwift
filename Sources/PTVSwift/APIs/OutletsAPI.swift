//
// OutletsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Alamofire



open class OutletsAPI {
    /**
     List all ticket outlets
     
     - parameter maxResults: (query) Maximum number of results returned (default &#x3D; 30) (optional)
     - parameter token: (query) Please ignore (optional)
     - parameter devid: (query) Your developer id (optional)
     - parameter signature: (query) Authentication signature for request (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func outletsGetAllOutlets(maxResults: Int? = nil, token: String? = nil, devid: String? = nil, signature: String? = nil, completion: @escaping ((_ data: V3OutletResponse?,_ error: Error?) -> Void)) {
        outletsGetAllOutletsWithRequestBuilder(maxResults: maxResults, token: token, devid: devid, signature: signature).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     List all ticket outlets
     - GET /v3/outlets
     - parameter maxResults: (query) Maximum number of results returned (default &#x3D; 30) (optional)
     - parameter token: (query) Please ignore (optional)
     - parameter devid: (query) Your developer id (optional)
     - parameter signature: (query) Authentication signature for request (optional)
     - returns: RequestBuilder<V3OutletResponse> 
     */
    open class func outletsGetAllOutletsWithRequestBuilder(maxResults: Int? = nil, token: String? = nil, devid: String? = nil, signature: String? = nil) -> RequestBuilder<V3OutletResponse> {
        let path = "/v3/outlets"
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "max_results": maxResults?.encodeToJSON(), 
            "token": token, 
            "devid": devid, 
            "signature": signature
        ])

        let requestBuilder: RequestBuilder<V3OutletResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     List ticket outlets near a specific location
     
     - parameter latitude: (path) Geographic coordinate of latitude 
     - parameter longitude: (path) Geographic coordinate of longitude 
     - parameter maxDistance: (query) Filter by maximum distance (in metres) from location specified via latitude and longitude parameters (default &#x3D; 300) (optional)
     - parameter maxResults: (query) Maximum number of results returned (default &#x3D; 30) (optional)
     - parameter token: (query) Please ignore (optional)
     - parameter devid: (query) Your developer id (optional)
     - parameter signature: (query) Authentication signature for request (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func outletsGetOutletsByGeolocation(latitude: Float, longitude: Float, maxDistance: Double? = nil, maxResults: Int? = nil, token: String? = nil, devid: String? = nil, signature: String? = nil, completion: @escaping ((_ data: V3OutletGeolocationResponse?,_ error: Error?) -> Void)) {
        outletsGetOutletsByGeolocationWithRequestBuilder(latitude: latitude, longitude: longitude, maxDistance: maxDistance, maxResults: maxResults, token: token, devid: devid, signature: signature).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     List ticket outlets near a specific location
     - GET /v3/outlets/location/{latitude},{longitude}
     - parameter latitude: (path) Geographic coordinate of latitude 
     - parameter longitude: (path) Geographic coordinate of longitude 
     - parameter maxDistance: (query) Filter by maximum distance (in metres) from location specified via latitude and longitude parameters (default &#x3D; 300) (optional)
     - parameter maxResults: (query) Maximum number of results returned (default &#x3D; 30) (optional)
     - parameter token: (query) Please ignore (optional)
     - parameter devid: (query) Your developer id (optional)
     - parameter signature: (query) Authentication signature for request (optional)
     - returns: RequestBuilder<V3OutletGeolocationResponse> 
     */
    open class func outletsGetOutletsByGeolocationWithRequestBuilder(latitude: Float, longitude: Float, maxDistance: Double? = nil, maxResults: Int? = nil, token: String? = nil, devid: String? = nil, signature: String? = nil) -> RequestBuilder<V3OutletGeolocationResponse> {
        var path = "/v3/outlets/location/{latitude},{longitude}"
        let latitudePreEscape = "\(APIHelper.mapValueToPathItem(latitude))"
        let latitudePostEscape = latitudePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{latitude}", with: latitudePostEscape, options: .literal, range: nil)
        let longitudePreEscape = "\(APIHelper.mapValueToPathItem(longitude))"
        let longitudePostEscape = longitudePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{longitude}", with: longitudePostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "max_distance": maxDistance, 
            "max_results": maxResults?.encodeToJSON(), 
            "token": token, 
            "devid": devid, 
            "signature": signature
        ])

        let requestBuilder: RequestBuilder<V3OutletGeolocationResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
