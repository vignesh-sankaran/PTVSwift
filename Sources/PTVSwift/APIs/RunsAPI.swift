//
// RunsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Alamofire



open class RunsAPI {
    /**
     View all trip/service runs for a specific route ID
     
     - parameter routeId: (path) Identifier of route; values returned by Routes API - v3/routes. 
     - parameter token: (query) Please ignore (optional)
     - parameter devid: (query) Your developer id (optional)
     - parameter signature: (query) Authentication signature for request (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func runsForRoute(routeId: Int, token: String? = nil, devid: String? = nil, signature: String? = nil, completion: @escaping ((_ data: V3RunsResponse?,_ error: Error?) -> Void)) {
        runsForRouteWithRequestBuilder(routeId: routeId, token: token, devid: devid, signature: signature).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     View all trip/service runs for a specific route ID
     - GET /v3/runs/route/{route_id}
     - parameter routeId: (path) Identifier of route; values returned by Routes API - v3/routes. 
     - parameter token: (query) Please ignore (optional)
     - parameter devid: (query) Your developer id (optional)
     - parameter signature: (query) Authentication signature for request (optional)
     - returns: RequestBuilder<V3RunsResponse> 
     */
    open class func runsForRouteWithRequestBuilder(routeId: Int, token: String? = nil, devid: String? = nil, signature: String? = nil) -> RequestBuilder<V3RunsResponse> {
        var path = "/v3/runs/route/{route_id}"
        let routeIdPreEscape = "\(APIHelper.mapValueToPathItem(routeId))"
        let routeIdPostEscape = routeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{route_id}", with: routeIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "token": token, 
            "devid": devid, 
            "signature": signature
        ])

        let requestBuilder: RequestBuilder<V3RunsResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter routeType
     */
    public enum RouteType_runsForRouteAndRouteType: Int {
        case _0 = 0
        case _1 = 1
        case _2 = 2
        case _3 = 3
        case _4 = 4
    }

    /**
     View all trip/service runs for a specific route ID and route type
     
     - parameter routeId: (path) Identifier of route; values returned by Routes API - v3/routes. 
     - parameter routeType: (path) Number identifying transport mode; values returned via RouteTypes API 
     - parameter token: (query) Please ignore (optional)
     - parameter devid: (query) Your developer id (optional)
     - parameter signature: (query) Authentication signature for request (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func runsForRouteAndRouteType(routeId: Int, routeType: RouteType_runsForRouteAndRouteType, token: String? = nil, devid: String? = nil, signature: String? = nil, completion: @escaping ((_ data: V3RunsResponse?,_ error: Error?) -> Void)) {
        runsForRouteAndRouteTypeWithRequestBuilder(routeId: routeId, routeType: routeType, token: token, devid: devid, signature: signature).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     View all trip/service runs for a specific route ID and route type
     - GET /v3/runs/route/{route_id}/route_type/{route_type}
     - parameter routeId: (path) Identifier of route; values returned by Routes API - v3/routes. 
     - parameter routeType: (path) Number identifying transport mode; values returned via RouteTypes API 
     - parameter token: (query) Please ignore (optional)
     - parameter devid: (query) Your developer id (optional)
     - parameter signature: (query) Authentication signature for request (optional)
     - returns: RequestBuilder<V3RunsResponse> 
     */
    open class func runsForRouteAndRouteTypeWithRequestBuilder(routeId: Int, routeType: RouteType_runsForRouteAndRouteType, token: String? = nil, devid: String? = nil, signature: String? = nil) -> RequestBuilder<V3RunsResponse> {
        var path = "/v3/runs/route/{route_id}/route_type/{route_type}"
        let routeIdPreEscape = "\(APIHelper.mapValueToPathItem(routeId))"
        let routeIdPostEscape = routeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{route_id}", with: routeIdPostEscape, options: .literal, range: nil)
        let routeTypePreEscape = "\(routeType.rawValue)"
        let routeTypePostEscape = routeTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{route_type}", with: routeTypePostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "token": token, 
            "devid": devid, 
            "signature": signature
        ])

        let requestBuilder: RequestBuilder<V3RunsResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     View all trip/service runs for a specific run ID
     
     - parameter runId: (path) Identifier of a trip/service run; values returned by Runs API - /v3/route/{route_id} and Departures API 
     - parameter token: (query) Please ignore (optional)
     - parameter devid: (query) Your developer id (optional)
     - parameter signature: (query) Authentication signature for request (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func runsForRun(runId: Int, token: String? = nil, devid: String? = nil, signature: String? = nil, completion: @escaping ((_ data: V3RunsResponse?,_ error: Error?) -> Void)) {
        runsForRunWithRequestBuilder(runId: runId, token: token, devid: devid, signature: signature).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     View all trip/service runs for a specific run ID
     - GET /v3/runs/{run_id}
     - parameter runId: (path) Identifier of a trip/service run; values returned by Runs API - /v3/route/{route_id} and Departures API 
     - parameter token: (query) Please ignore (optional)
     - parameter devid: (query) Your developer id (optional)
     - parameter signature: (query) Authentication signature for request (optional)
     - returns: RequestBuilder<V3RunsResponse> 
     */
    open class func runsForRunWithRequestBuilder(runId: Int, token: String? = nil, devid: String? = nil, signature: String? = nil) -> RequestBuilder<V3RunsResponse> {
        var path = "/v3/runs/{run_id}"
        let runIdPreEscape = "\(APIHelper.mapValueToPathItem(runId))"
        let runIdPostEscape = runIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{run_id}", with: runIdPostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "token": token, 
            "devid": devid, 
            "signature": signature
        ])

        let requestBuilder: RequestBuilder<V3RunsResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter routeType
     */
    public enum RouteType_runsForRunAndRouteType: Int {
        case _0 = 0
        case _1 = 1
        case _2 = 2
        case _3 = 3
        case _4 = 4
    }

    /**
     View the trip/service run for a specific run ID and route type
     
     - parameter runId: (path) Identifier of a trip/service run; values returned by Runs API - /v3/route/{route_id} and Departures API 
     - parameter routeType: (path) Number identifying transport mode; values returned via RouteTypes API 
     - parameter token: (query) Please ignore (optional)
     - parameter devid: (query) Your developer id (optional)
     - parameter signature: (query) Authentication signature for request (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func runsForRunAndRouteType(runId: Int, routeType: RouteType_runsForRunAndRouteType, token: String? = nil, devid: String? = nil, signature: String? = nil, completion: @escaping ((_ data: V3RunResponse?,_ error: Error?) -> Void)) {
        runsForRunAndRouteTypeWithRequestBuilder(runId: runId, routeType: routeType, token: token, devid: devid, signature: signature).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     View the trip/service run for a specific run ID and route type
     - GET /v3/runs/{run_id}/route_type/{route_type}
     - parameter runId: (path) Identifier of a trip/service run; values returned by Runs API - /v3/route/{route_id} and Departures API 
     - parameter routeType: (path) Number identifying transport mode; values returned via RouteTypes API 
     - parameter token: (query) Please ignore (optional)
     - parameter devid: (query) Your developer id (optional)
     - parameter signature: (query) Authentication signature for request (optional)
     - returns: RequestBuilder<V3RunResponse> 
     */
    open class func runsForRunAndRouteTypeWithRequestBuilder(runId: Int, routeType: RouteType_runsForRunAndRouteType, token: String? = nil, devid: String? = nil, signature: String? = nil) -> RequestBuilder<V3RunResponse> {
        var path = "/v3/runs/{run_id}/route_type/{route_type}"
        let runIdPreEscape = "\(APIHelper.mapValueToPathItem(runId))"
        let runIdPostEscape = runIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{run_id}", with: runIdPostEscape, options: .literal, range: nil)
        let routeTypePreEscape = "\(routeType.rawValue)"
        let routeTypePostEscape = routeTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{route_type}", with: routeTypePostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "token": token, 
            "devid": devid, 
            "signature": signature
        ])

        let requestBuilder: RequestBuilder<V3RunResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
