//
// StopsAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
import Alamofire



open class StopsAPI {
    /**
     * enum for parameter routeType
     */
    public enum RouteType_stopsStopDetails: Int {
        case _0 = 0
        case _1 = 1
        case _2 = 2
        case _3 = 3
        case _4 = 4
    }

    /**
     View facilities at a specific stop (Metro and V/Line stations only)
     
     - parameter stopId: (path) Identifier of stop; values returned by Stops API 
     - parameter routeType: (path) Number identifying transport mode; values returned via RouteTypes API 
     - parameter stopLocation: (query) Indicates if stop location information will be returned (default &#x3D; false) (optional)
     - parameter stopAmenities: (query) Indicates if stop amenity information will be returned (default &#x3D; false) (optional)
     - parameter stopAccessibility: (query) Indicates if stop accessibility information will be returned (default &#x3D; false) (optional)
     - parameter stopContact: (query) Indicates if stop contact information will be returned (default &#x3D; false) (optional)
     - parameter stopTicket: (query) Indicates if stop ticket information will be returned (default &#x3D; false) (optional)
     - parameter gtfs: (query) Incdicates whether the stop_id is a GTFS ID or not (optional)
     - parameter stopStaffing: (query) Indicates if stop staffing information will be returned (default &#x3D; false) (optional)
     - parameter stopDisruptions: (query) Indicates if stop disruption information will be returned (default &#x3D; false) (optional)
     - parameter token: (query) Please ignore (optional)
     - parameter devid: (query) Your developer id (optional)
     - parameter signature: (query) Authentication signature for request (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func stopsStopDetails(stopId: Int, routeType: RouteType_stopsStopDetails, stopLocation: Bool? = nil, stopAmenities: Bool? = nil, stopAccessibility: Bool? = nil, stopContact: Bool? = nil, stopTicket: Bool? = nil, gtfs: Bool? = nil, stopStaffing: Bool? = nil, stopDisruptions: Bool? = nil, token: String? = nil, devid: String? = nil, signature: String? = nil, completion: @escaping ((_ data: V3StopResponse?,_ error: Error?) -> Void)) {
        stopsStopDetailsWithRequestBuilder(stopId: stopId, routeType: routeType, stopLocation: stopLocation, stopAmenities: stopAmenities, stopAccessibility: stopAccessibility, stopContact: stopContact, stopTicket: stopTicket, gtfs: gtfs, stopStaffing: stopStaffing, stopDisruptions: stopDisruptions, token: token, devid: devid, signature: signature).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     View facilities at a specific stop (Metro and V/Line stations only)
     - GET /v3/stops/{stop_id}/route_type/{route_type}
     - parameter stopId: (path) Identifier of stop; values returned by Stops API 
     - parameter routeType: (path) Number identifying transport mode; values returned via RouteTypes API 
     - parameter stopLocation: (query) Indicates if stop location information will be returned (default &#x3D; false) (optional)
     - parameter stopAmenities: (query) Indicates if stop amenity information will be returned (default &#x3D; false) (optional)
     - parameter stopAccessibility: (query) Indicates if stop accessibility information will be returned (default &#x3D; false) (optional)
     - parameter stopContact: (query) Indicates if stop contact information will be returned (default &#x3D; false) (optional)
     - parameter stopTicket: (query) Indicates if stop ticket information will be returned (default &#x3D; false) (optional)
     - parameter gtfs: (query) Incdicates whether the stop_id is a GTFS ID or not (optional)
     - parameter stopStaffing: (query) Indicates if stop staffing information will be returned (default &#x3D; false) (optional)
     - parameter stopDisruptions: (query) Indicates if stop disruption information will be returned (default &#x3D; false) (optional)
     - parameter token: (query) Please ignore (optional)
     - parameter devid: (query) Your developer id (optional)
     - parameter signature: (query) Authentication signature for request (optional)
     - returns: RequestBuilder<V3StopResponse> 
     */
    open class func stopsStopDetailsWithRequestBuilder(stopId: Int, routeType: RouteType_stopsStopDetails, stopLocation: Bool? = nil, stopAmenities: Bool? = nil, stopAccessibility: Bool? = nil, stopContact: Bool? = nil, stopTicket: Bool? = nil, gtfs: Bool? = nil, stopStaffing: Bool? = nil, stopDisruptions: Bool? = nil, token: String? = nil, devid: String? = nil, signature: String? = nil) -> RequestBuilder<V3StopResponse> {
        var path = "/v3/stops/{stop_id}/route_type/{route_type}"
        let stopIdPreEscape = "\(APIHelper.mapValueToPathItem(stopId))"
        let stopIdPostEscape = stopIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{stop_id}", with: stopIdPostEscape, options: .literal, range: nil)
        let routeTypePreEscape = "\(routeType.rawValue)"
        let routeTypePostEscape = routeTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{route_type}", with: routeTypePostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "stop_location": stopLocation, 
            "stop_amenities": stopAmenities, 
            "stop_accessibility": stopAccessibility, 
            "stop_contact": stopContact, 
            "stop_ticket": stopTicket, 
            "gtfs": gtfs, 
            "stop_staffing": stopStaffing, 
            "stop_disruptions": stopDisruptions, 
            "token": token, 
            "devid": devid, 
            "signature": signature
        ])

        let requestBuilder: RequestBuilder<V3StopResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter routeTypes
     */
    public enum RouteTypes_stopsStopsByGeolocation: Int {
        case _0 = 0
        case _1 = 1
        case _2 = 2
        case _3 = 3
        case _4 = 4
    }

    /**
     View all stops near a specific location
     
     - parameter latitude: (path) Geographic coordinate of latitude 
     - parameter longitude: (path) Geographic coordinate of longitude 
     - parameter routeTypes: (query) Filter by route_type; values returned via RouteTypes API (optional)
     - parameter maxResults: (query) Maximum number of results returned (default &#x3D; 30) (optional)
     - parameter maxDistance: (query) Filter by maximum distance (in metres) from location specified via latitude and longitude parameters (default &#x3D; 300) (optional)
     - parameter stopDisruptions: (query) Indicates if stop disruption information will be returned (default &#x3D; false) (optional)
     - parameter token: (query) Please ignore (optional)
     - parameter devid: (query) Your developer id (optional)
     - parameter signature: (query) Authentication signature for request (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func stopsStopsByGeolocation(latitude: Float, longitude: Float, routeTypes: [Int]? = nil, maxResults: Int? = nil, maxDistance: Double? = nil, stopDisruptions: Bool? = nil, token: String? = nil, devid: String? = nil, signature: String? = nil, completion: @escaping ((_ data: V3StopsByDistanceResponse?,_ error: Error?) -> Void)) {
        stopsStopsByGeolocationWithRequestBuilder(latitude: latitude, longitude: longitude, routeTypes: routeTypes, maxResults: maxResults, maxDistance: maxDistance, stopDisruptions: stopDisruptions, token: token, devid: devid, signature: signature).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     View all stops near a specific location
     - GET /v3/stops/location/{latitude},{longitude}
     - parameter latitude: (path) Geographic coordinate of latitude 
     - parameter longitude: (path) Geographic coordinate of longitude 
     - parameter routeTypes: (query) Filter by route_type; values returned via RouteTypes API (optional)
     - parameter maxResults: (query) Maximum number of results returned (default &#x3D; 30) (optional)
     - parameter maxDistance: (query) Filter by maximum distance (in metres) from location specified via latitude and longitude parameters (default &#x3D; 300) (optional)
     - parameter stopDisruptions: (query) Indicates if stop disruption information will be returned (default &#x3D; false) (optional)
     - parameter token: (query) Please ignore (optional)
     - parameter devid: (query) Your developer id (optional)
     - parameter signature: (query) Authentication signature for request (optional)
     - returns: RequestBuilder<V3StopsByDistanceResponse> 
     */
    open class func stopsStopsByGeolocationWithRequestBuilder(latitude: Float, longitude: Float, routeTypes: [Int]? = nil, maxResults: Int? = nil, maxDistance: Double? = nil, stopDisruptions: Bool? = nil, token: String? = nil, devid: String? = nil, signature: String? = nil) -> RequestBuilder<V3StopsByDistanceResponse> {
        var path = "/v3/stops/location/{latitude},{longitude}"
        let latitudePreEscape = "\(APIHelper.mapValueToPathItem(latitude))"
        let latitudePostEscape = latitudePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{latitude}", with: latitudePostEscape, options: .literal, range: nil)
        let longitudePreEscape = "\(APIHelper.mapValueToPathItem(longitude))"
        let longitudePostEscape = longitudePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{longitude}", with: longitudePostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "route_types": routeTypes, 
            "max_results": maxResults?.encodeToJSON(), 
            "max_distance": maxDistance, 
            "stop_disruptions": stopDisruptions, 
            "token": token, 
            "devid": devid, 
            "signature": signature
        ])

        let requestBuilder: RequestBuilder<V3StopsByDistanceResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

    /**
     * enum for parameter routeType
     */
    public enum RouteType_stopsStopsForRoute: Int {
        case _0 = 0
        case _1 = 1
        case _2 = 2
        case _3 = 3
        case _4 = 4
    }

    /**
     View all stops on a specific route
     
     - parameter routeId: (path) Identifier of route; values returned by Routes API - v3/routes 
     - parameter routeType: (path) Number identifying transport mode; values returned via RouteTypes API 
     - parameter directionId: (query) An optional direction; values returned by Directions API. When this is set, stop sequence information is returned in the response. (optional)
     - parameter stopDisruptions: (query) Indicates if stop disruption information will be returned (default &#x3D; false) (optional)
     - parameter token: (query) Please ignore (optional)
     - parameter devid: (query) Your developer id (optional)
     - parameter signature: (query) Authentication signature for request (optional)
     - parameter completion: completion handler to receive the data and the error objects
     */
    open class func stopsStopsForRoute(routeId: Int, routeType: RouteType_stopsStopsForRoute, directionId: Int? = nil, stopDisruptions: Bool? = nil, token: String? = nil, devid: String? = nil, signature: String? = nil, completion: @escaping ((_ data: V3StopsOnRouteResponse?,_ error: Error?) -> Void)) {
        stopsStopsForRouteWithRequestBuilder(routeId: routeId, routeType: routeType, directionId: directionId, stopDisruptions: stopDisruptions, token: token, devid: devid, signature: signature).execute { (response, error) -> Void in
            completion(response?.body, error)
        }
    }

    /**
     View all stops on a specific route
     - GET /v3/stops/route/{route_id}/route_type/{route_type}
     - parameter routeId: (path) Identifier of route; values returned by Routes API - v3/routes 
     - parameter routeType: (path) Number identifying transport mode; values returned via RouteTypes API 
     - parameter directionId: (query) An optional direction; values returned by Directions API. When this is set, stop sequence information is returned in the response. (optional)
     - parameter stopDisruptions: (query) Indicates if stop disruption information will be returned (default &#x3D; false) (optional)
     - parameter token: (query) Please ignore (optional)
     - parameter devid: (query) Your developer id (optional)
     - parameter signature: (query) Authentication signature for request (optional)
     - returns: RequestBuilder<V3StopsOnRouteResponse> 
     */
    open class func stopsStopsForRouteWithRequestBuilder(routeId: Int, routeType: RouteType_stopsStopsForRoute, directionId: Int? = nil, stopDisruptions: Bool? = nil, token: String? = nil, devid: String? = nil, signature: String? = nil) -> RequestBuilder<V3StopsOnRouteResponse> {
        var path = "/v3/stops/route/{route_id}/route_type/{route_type}"
        let routeIdPreEscape = "\(APIHelper.mapValueToPathItem(routeId))"
        let routeIdPostEscape = routeIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{route_id}", with: routeIdPostEscape, options: .literal, range: nil)
        let routeTypePreEscape = "\(routeType.rawValue)"
        let routeTypePostEscape = routeTypePreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        path = path.replacingOccurrences(of: "{route_type}", with: routeTypePostEscape, options: .literal, range: nil)
        let URLString = OpenAPIClientAPI.basePath + path
        let parameters: [String:Any]? = nil
        
        var url = URLComponents(string: URLString)
        url?.queryItems = APIHelper.mapValuesToQueryItems([
            "direction_id": directionId?.encodeToJSON(), 
            "stop_disruptions": stopDisruptions, 
            "token": token, 
            "devid": devid, 
            "signature": signature
        ])

        let requestBuilder: RequestBuilder<V3StopsOnRouteResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return requestBuilder.init(method: "GET", URLString: (url?.string ?? URLString), parameters: parameters, isBody: false)
    }

}
